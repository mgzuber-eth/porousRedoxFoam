/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     porousRedoxFoam;

startFrom       startTime;

startTime       0; 

stopAt          endTime;

endTime         2800.;

deltaT          0.000000000001; 

writeControl    adjustableRunTime; 

writeInterval   400.;

purgeWrite      0;

writeFormat     ascii; 

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep yes;

maxCo      5; 

maxDi      5000; 

maxDeltaT	0.004; 

functions
{
	deltaFieldUpdater
	{
		libs	("libutilityFunctionObjects.so");
		type coded;	
		
		
		codeExecute
		#{
			Info << "Looking up deltaField - via controlDict function" << endl;
			//getting address of object with ability to read/write to it!!!!
			//below from: https://www.cfd-online.com/Forums/openfoam-programming-development/233664-access-fields-function-objects.html
			volScalarField& deltaField = 
			const_cast<volScalarField&>
			(
			mesh().lookupObject<volScalarField>("deltaField")
			);
		
			Info << "Looking up Yceria and Ycered - via controlDict function" << endl;
			const volScalarField& Yceria = mesh().lookupObject<volScalarField>("Yceria"); //just need to read this value
			const volScalarField& Ycered = mesh().lookupObject<volScalarField>("Ycered");

			Info << "Updating deltaField - via controlDict function" << endl;
			deltaField = Ycered/(Ycered+(1.-Ycered)*(156./172.));
		#};
	}
	
	
	probesT
	{
		type	probes;
		libs	("libsampling.so");
		writeControl	runTime;
		writeInterval	1.;
		
		fields
		(
			T Ts
		);
		
		probeLocations
		(
			(0.15 0.0 0.0)	
			(0.15 0.003 0.0)
			(0.15 0.006 0.0)
			(0.15 0.009 0.0)
			(0.0 0.0 0.0)
			(0.05 0.0 0.0)
			(0.1 0.0 0.0)
			(0.15 0.0 0.0)
			(0.2 0.0 0.0)
			(0.25 0.0 0.0)
			(0.3 0.0 0.0)
		);
	}

	probesTFine
	{
		type	probes;
		libs	("libsampling.so");
		writeControl	runTime;
		writeInterval	1.;
		
		fields
		(
			T Ts
		);
		
		probeLocations
		(
			(0.0 0.0 0.0)
			(0.01 0.0 0.0)
			(0.02 0.0 0.0)
			(0.03 0.0 0.0)
			(0.04 0.0 0.0)
			(0.05 0.0 0.0)
			(0.06 0.0 0.0)
			(0.07 0.0 0.0)
			(0.08 0.0 0.0)
			(0.09 0.0 0.0)
			(0.1 0.0 0.0)
			(0.11 0.0 0.0)
			(0.12 0.0 0.0)
			(0.13 0.0 0.0)
			(0.14 0.0 0.0)
			(0.15 0.0 0.0)
			(0.16 0.0 0.0)
			(0.17 0.0 0.0)
			(0.18 0.0 0.0)
			(0.19 0.0 0.0)
			(0.2 0.0 0.0)
			(0.21 0.0 0.0)
			(0.22 0.0 0.0)
			(0.23 0.0 0.0)
			(0.24 0.0 0.0)
			(0.25 0.0 0.0)
			(0.26 0.0 0.0)
			(0.27 0.0 0.0)
			(0.28 0.0 0.0)
			(0.29 0.0 0.0)
			(0.3 0.0 0.0)
		);
	}

	probesDeltaFine
	{
		type	probes;
		libs	("libsampling.so");
		writeControl	runTime;
		writeInterval	1.;
		
		fields
		(
			deltaField
		);
		
		probeLocations
		(
			(0.0 0.0 0.0)
			(0.01 0.0 0.0)
			(0.02 0.0 0.0)
			(0.03 0.0 0.0)
			(0.04 0.0 0.0)
			(0.05 0.0 0.0)
			(0.06 0.0 0.0)
			(0.07 0.0 0.0)
			(0.08 0.0 0.0)
			(0.09 0.0 0.0)
			(0.1 0.0 0.0)
			(0.11 0.0 0.0)
			(0.12 0.0 0.0)
			(0.13 0.0 0.0)
			(0.14 0.0 0.0)
			(0.15 0.0 0.0)
			(0.16 0.0 0.0)
			(0.17 0.0 0.0)
			(0.18 0.0 0.0)
			(0.19 0.0 0.0)
			(0.2 0.0 0.0)
			(0.21 0.0 0.0)
			(0.22 0.0 0.0)
			(0.23 0.0 0.0)
			(0.24 0.0 0.0)
			(0.25 0.0 0.0)
			(0.26 0.0 0.0)
			(0.27 0.0 0.0)
			(0.28 0.0 0.0)
			(0.29 0.0 0.0)
			(0.3 0.0 0.0)
		);
	}
	

	phiWeightedValues
	{
		libs    ("libfieldFunctionObjects.so");
		type	surfaceFieldValue;
		
		regionType		patch;
		name			outlet;
		operation		average;
		weightField		phi; 
		
		writeFields		no;
		writeToFile		true;
		writeControl	runTime;
		writeInterval	1.;
		
		fields			
		(
			CO
			CO2
			AR
			T
		);
	}
	
	areaWeightedValues
	{
		libs    ("libfieldFunctionObjects.so");
		type	surfaceFieldValue;
		
		regionType		patch;
		name			outlet;
		operation		areaAverage;
		
		writeFields 	no;
		writeToFile		true;
		writeControl	runTime;
		writeInterval	1.;
		
		fields
		(
			U
			Ts
		);
	}
	
	
	avgDelta
	{
		libs	("libfieldFunctionObjects.so");
		type volFieldValue;
		
		fields		(deltaField);
		operation	volAverage;
		regionType	all;
		
		writeFields		no;
		writeToFile		true;
		writeControl	runTime;
		writeInterval	1.;
	}

	avgT
	{
		libs	("libfieldFunctionObjects.so");
		type volFieldValue;
		
		fields		
		(
			T
			Ts
		);
		operation	volAverage;
		regionType	all;
		
		writeFields		no;
		writeToFile		true;
		writeControl	runTime;
		writeInterval	1.;
	}

}



// ************************************************************************* //
